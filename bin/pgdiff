#!/bin/env ruby

# This is a simple approach to track database schema changes in PostgreSQL.
# In some way it is similar to diff program, finding out structure changes
# and results in  SQL script to upgrade to new schema.
# 
# Differences are tracked on schemas, domains, sequences, views, tables, indices, constraints, rules, functions, triggers.
# Two objects with the same name are considered equal if they have the same definitions. 
#
# Missing features: tracking of ownership,  user rights, object dependencies, table inheritance, type casts, aggregates, operators.
#
# Usage:
# ./pg_diff source_connection_string destination_connection_string
#
# The format of the connection strings is documented in the Ruby pg gem
# at https://www.rubydoc.info/gems/pg/PG/Connection.new

lib_path = File.expand_path(File.join(__dir__, '..', 'lib'))
$LOAD_PATH.unshift(File.expand_path(lib_path))

require 'pg'
require 'pgdiff'
require 'optparse'
require 'ostruct'

options = OpenStruct.new
options.source = nil
options.target = nil
options.ignore_schemas = []

args = OptionParser.new do |parser|
  parser.version = PgDiff::VERSION

  parser.banner = "Usage: pgdiff --source --target"

  parser.on("-s", "--source=connection_string", "Source connection string. See https://www.rubydoc.info/gems/pg/PG/Connection.new") do |source|
    options.source = source
  end

  parser.on("-t", "--target=connection_string", "Target connection string. See see https://www.rubydoc.info/gems/pg/PG/Connection.new") do |target|
    options.target = target
  end

  parser.on("--ignore_schemas=schema1,schema2", "Schemas to ignore. Comma separated string") do |ignore_schemas|
    options.ignore_schemas = ignore_schemas.split(',').map {|schema_name| schema_name.strip}
  end

  parser.on("-h", "--help", "Prints this help") do
    puts parser
    exit
  end
end.parse!

diff = PgDiff::Diff.new(options.source, options.target, ignore_schemas: options.ignore_schemas)
output = diff.run_compare
puts output.string